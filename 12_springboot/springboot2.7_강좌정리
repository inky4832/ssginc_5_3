
Spring 어플리케이션 개발

1. Spring Framework 프로젝트
  - https://spring.io/projects/spring-framework#learn 가서 Reference Doc과 API Doc 참조.
  - 최신 버전인 6 는 JDK 17 부터 지원됨.
  - STS 3 사용해야 됨.

2. Spring Boot 프로젝트
  - https://spring.io/projects/spring-boot#learn 가서 Reference Doc과 API Doc 참조.
  - 최신 버전인 3 는 JDK 17 부터 지원됨.
  - STS 3 및 STS 4 모두 가능

3. 용어 정리

  1) POJO 
   - Plain Old Java Object
   - 플랫폼에 독립적인 형태의 클래스를 의미한다.
   예> CartListServlet는 의존적인 클래스( extends HttpServlet 때문에 Tomcat이 설치된 웹개발에서만 사용가능)
      CartDTO는 독립적인 클래스.

 2) (Spring) Bean
   - Spring 환경에서 사용되는 POJO 기반의 클래스 의미.

 3) IoC Container ( Inversion of Control Container: 제어의 역행)
   https://docs.spring.io/spring-framework/docs/5.2.25.RELEASE/spring-framework-reference/core.html#beans

   - 개념:
      IoC(Inversion of Control) 방법으로 Spring Bean을 관리(생성~소멸)하기 때문에 붙여진 이름

   - 비슷한용어:
     Spring Container
     Spring Context

   - 기능:
     Spring Bean을 관리(생성~소멸) 및 의존성 설정(DI:Dependency Injection: 의존성 주입).
     (이전 개발방식은 클래스를 직접 생성하고 의존성도 직접 설정했음.
      이런 순방향의 개발이 아닌 완전히 역방향의 개발이기 때문임.
      )

   - IoC Container의 실체는 Spring Bean이다. 계층구조로 되어 있음.

                    BeanFactory  ( 인터페이스 )
                          |                  |
	    XXXApplicationContext       XXXBeanFactory
                    |
            AnnotationConfigApplicationContext
	    GenericXmlApplicationContext
	    XXXWebApplicationContext ( web이 있는 것은 웹어플리케이션 개발용 IoC Container 임)

     BeanFactory: 기본 Spring Container 임.
     ApplicationContext : 기본기능 + enterprise 환경에서 필요한 전용기능이 추가된 컨테이너임
                                   ( 웹개발가능. I18N(국제화:InternationalizatioN), AOP 기능,.. )


  4) DI(Dependency Injection: 의존성 주입)

    - 의존성? A 클래스가 B를 사용하면 A와 B간에 의존성이 생김.
    - 의존성 주입? A(CartService)클래스가 B(CartDAO) 를 참조하기 위해서 외부(CartListServlet)에서 
                A 클래스의 생성자에 B 객체를 생성해서 설정하는 작업을 의미.

		Spring에서는 외부 역할을 IoC Container가 담당한다.

     - 의존성 주입 방법

       가. 생성자 이용한 주입
       https://docs.spring.io/spring-framework/docs/5.2.25.RELEASE/spring-framework-reference/core.html#beans-constructor-injection
       
       나. set메서드 이용한 주입
       https://docs.spring.io/spring-framework/docs/5.2.25.RELEASE/spring-framework-reference/core.html#beans-setter-injection



4. 빌드툴 (build tool)

 1) 개념
   - 개발시 사용되는 자동화 툴.

 2) 종류

   - Maven (메이븐)
      pom.xml ( 설정파일: jdk/boot 버전, 필요한 jar 파일들 설정)

   - Gradle (그레들) 

      buile.gradle ( 설정파일: jdk/boot 버전, 필요한 jar 파일들 설정)


  3) 빌드툴 기능

    가. 이전 개발 프로세스

     소스코드작성 ----> 컴파일 ---> 테스트 파일작성(단위테스트) ->컴파일 ------> 패키징(jar/war) --->배포
             
	     필요한 외부 jar 다운
	       + 
             빌드패스
             <---------------------------------------------------------------------------->
	         개발자가 직접 수동으로 해줌.

    나. 빌드툴 적용한 개발 프로세스

      소스코드작성 ----> 컴파일 ---> 테스트 파일작성(단위테스트) ->컴파일 ------> 패키징(jar/war) --->배포
             
	     필요한 외부 jar 다운
	       + 
             빌드패스
              <----------------------------------------------------------------------------->
	                빌드툴이 거의 자동화해줌.


   4) Maven의 기본 디렉터리 구조

      src/main/java :  이전 이클립스의 src 경로와 동일.  *.java 저장
      src/main/resource:  *.java 제외한 나머지 파일들 저장.
                         예> jdbc.properties, EmpMapper.xml ( 이전에는 src 에 저장 )

      src/test/java :  단위 테스트 용도의  *.java 저장
      src/test/resource:  단위 테스트 용도의  *.java 제외한 파일 저장.

      JRE System Library : jdk 11 용 jar파일들 저장.
      Maven Dependencies : SpringBoot에서 사용해야 되는 jar파일들 저장.

        - junit( mockito ) 관련 jar: 단위 테스트 용도
        
	- logback(log4j, slf4j) 관련 jar:  로그출력 ( 로깅: logging )
	                          - 이제부터 System.out.println 더 이상 사용안함.

        - spring-beans, spring-core 관련 jar : Spring Framework

        - spring boot 관련 jar: Spring Boot 

    ===> 저장 경로는 C:\Users\ssginc76\.m2\repository 이다. (로컬 저장소 )

       pom.xml ( Project Object Model )
       - 버전, 필요한 jar 정보등 설정
       - 계층구조로 구성됨. ( 부모에 해당하는 pom.xml 있음 )
       - 필요로 하는 jar 파일은 <dependency> 태그로 설정하면 자동으로 다운로드 되고 build path까지 해줌.
         http://mvnrepository.com


    5) Maven의 주요 기능

      가. 의존성 설정
        - pom.xml 에 필요로 하는 jar 파일은 <dependency> 태그로 설정하면 자동으로 다운로드 되고 build path까지 해줌.
	- http://mvnrepository.com 에서 <dependency> 정보를 얻을 수 있음.

     나. 빌드시 사용되는 단계별 명령어

      


5. SpringBoot 프로젝트 생성 방법
 
  ==> 명시적으로 빌드툴 (build tool) 선택해야됨.
  ==> 
     STS 4 버전
       ==> pom.xml 파일의 <project>태그내의 값은 변경해야 된다.
       변경전: https://maven.apache.org/xsd/maven-4.0.0.xsd
       변경후: http://maven.apache.org/xsd/maven-4.0.0.xsd

     JDK: 11 버전
     SpringBoot: 2.7.18 버전

  1) STS에서 직접생성
    - STS에서 New > Spring Starter Project 선택

  2) Initializer 이용한 방법
     - 웹에서 생성후 다운받아서 사용함.
      http://start.spring.io
