###################################################################################
SpringSecurity 

1. 제공파일

  - 의존성
      		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
        <dependency>
	       <groupId>org.springframework.boot</groupId>
	       <artifactId>spring-boot-devtools</artifactId>
	    </dependency> 
	    
	      <!-- JSP 사용 -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency> 
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		 <dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>bootstrap</artifactId>
		    <version>5.1.3</version>
		</dependency>
		<dependency>
		    <groupId>org.webjars</groupId>
		    <artifactId>jquery</artifactId>
		    <version>3.6.0</version>
		</dependency>

   - application.properties
       # tomcat의 기본 port 변경
	server.port=8090
	server.servlet.context-path=/app


	# JSP 설정
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp


    - MemberDTO.java
       public class Member {

	@NotBlank(message = "적어도 한글이상")
	String userid;
	
	String passwd;
	
	@NotBlank(message = "적어도 한글이상")
	String username;


2. SpringSecurity
 
  1) 개요
    - 사용자의 인증(Authentication) 과 권한(Authorization )에 활용하는 기술로서
      Spring 의 서브 프로젝트임.

    인증(Authentication): ID/PW 이용해서 체크하는 작업.
    권한(Authorization ): 인증후 접근 가능한 자원을 구분하는 작업.
                         ROLE 이용해서 구분함.


  2) 실습1 ( security 의존성 설정 및 계정과 비번 사용자 설정 )

    - 의존성 설정
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

    - 의존성 설정이후의 변환된 상황
    
       가. 자동으로 로그인/로그아웃 관리
          로그인은 /login 이고
	  로그아웃은 /logout 임.

       나. 콘솔에 암호화된 비번을 다음과 같이 알려줌. ( 비번은 실행할때마다 매번 바뀜 )

      계정명: user
      Using generated security password: b4252567-116a-4081-8bbd-9b8ff523d4ce
                                         f852725e-4049-457a-a321-a8986caa51ed
       

      비번이 매번 바뀜.
      /home으로 요청하면 로그인화면이 나오고 인증하면 /home으로 요청이 가능해짐.
      인증결과는 세션에 저장이 된다.  (*************)
 
       다.  계정과 비번을 임의로 지정할 수 있다.
         
	  # application.properties
	   
	   # 계정 및 비번 임의 지정( 재실행도 고정됨 )
		spring.security.user.name=inky4832
		spring.security.user.password=1234


  2) 실습2 ( 회원가입 + 비번은 반드시 암호화해야 된다. )
 
     - member 테이블 작성
        -- use testdb;
	-- show full columns from todo;

	drop table if exists member;

	create table member
	( userid    varchar(255) not null COMMENT '아이디',
	  passwd  varchar(255) not null COMMENT '비밀번호',
	  username varchar(255) not null COMMENT 'TODO 작성자',
	  primary key(userid)
	);

      - 의존성설정

          	<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>2.1.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
		</dependency>

       - application.properties DB연동설정

                 #  DB 연동위한 4가지 정보 설정
		spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		spring.datasource.url=jdbc:mysql://localhost:3306/testdb
		spring.datasource.username=root
		spring.datasource.password=1234


		# 별칭
		mybatis.type-aliases-package=com.exam.dto
		# mapper 등록
		mybatis.mapper-locations=com/exam/mapper/*Mapper.xml


      - 비번 암호화 구현
        		// 비번 암호화 필수
		String encptPw = 
				new BCryptPasswordEncoder().encode(member.getPasswd());
		member.setPasswd(encptPw);


   2) 실습3

     - 이전까지는 인증이 필요없는 요청도 (/home, /signup) security가 인증하도록 강제함.
     - 기본적으로 동작되는 security의 FilterChain을 커스터마이징이 가능하다.

        예> 불필요한 인증제거
	   로그인화면을 사용자가 만든 화면으로 변경
	   인증실패시/인증성공시 사용자가 특정 위치로 리다이렉트 가능
	   로그아웃 커스터마이징

      - 커스터마이징 시작했으면 인증제거~로그아웃 끝까지 재설정 작업이 필요하다.

         @Configuration
       public class SecurityFilterChainConfig {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		//커스터마이징 처리
		
		//1. 불필요한 인증제거
		http.authorizeRequests()
		    .antMatchers("/login","/home","/signup","/webjars/**","/images/**").permitAll()
		    .anyRequest()
		    .authenticated();
		
		//2. 로그인 관련 작업
		
		http.formLogin()     // 사용자가 만든 로그인화면으로 인증처리 하겠음.
		    .loginPage("/login") // 로그인 페이지로 갈수 있는 요청맵핑값 <a href="login">로그인
		    .loginProcessingUrl("/auth") // <form  action="auth"  method="post"
		    .usernameParameter("userid")    // <input name="userid">
		    .passwordParameter("passwd")       // <input name="passwd">
		    .failureForwardUrl("/login_fail")        // 로그인 실패시 리다이렉트되는 요청맵핑값
		    .defaultSuccessUrl("/login_success", true); // 로그인 성공시 리다이렉트되는 요청맵핑값
		    
	     //3. csrf 비활성화
		http.csrf().disable();

		    * CSRF(Cross Site Request Forgery: 요청 사이트간 위조 )
		     - POST와PUT할 때 신경써야 된다.
		     - security가 자동으로 CSRF 방지하도록 자동으로 활성화 되어 있음.
                     - 정상적으로 로그인(쿠키에 정보가 저장됨)하고 로그아웃하지 않은 상태에서 
		       악성사이트에 접속하면 정상적인 작업의 쿠키정보를 악용할 수 있다.
		     
		
		 //4. 로그아웃 관련 작업
		 http.logout()
		     .logoutUrl("/logout")   // security가 자동으로 로그아웃 처리해주는 요청맵핑값
		     .logoutSuccessUrl("/home");  // logout 성공시 리다이렉트 되는 요청맵핑값
		     
		return http.build();
	}
	
}

    2) 실습4
     
       - loginForm에서 입력한 userid와 passwd를 DB와 비교하는 작업.

         인증이 성공하면 세션에 Member 저장.
	 인증이 실패하면 에러를 명시적으로 발생.

       - 실제 구현하는 빈을 작성.